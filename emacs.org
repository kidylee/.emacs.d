
* UI
  
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)


    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room

    (menu-bar-mode 1)            ; Disable the menu bar


    (setq visible-bell t)

    (setq visible-bell nil
	  ring-bell-function 'flash-mode-line)
    (defun flash-mode-line ()
      (invert-face 'mode-line)
      (run-with-timer 0.1 nil #'invert-face 'mode-line))

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

 #+END_SRC
 
* try
  #+BEGIN_SRC emacs-lisp
    (use-package try)
  #+END_SRC


* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 1))
  #+END_SRC

* window management
  #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	 ))
  #+END_SRC
* Buffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC
  
* Swiper / Ivy / Counsel
  #+BEGIN_SRC emacs-lisp

    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))



    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode 1))
  #+END_SRC

* Text Navigation
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
  #+END_SRC

* Helpful
  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :commands (helpful-callable helpful-variable helpful-command helpful-key)
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+END_SRC

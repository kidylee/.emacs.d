#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* Custom Shortcute
  #+begin_src emacs-lisp
    (global-set-key (kbd "<S-return>") (kbd "C-e C-m"))
  #+end_src
* UI
  
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (global-hl-line-mode t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room

    (menu-bar-mode 1)            ; Disable the menu bar


    (setq visible-bell t)

    (setq visible-bell nil
	  ring-bell-function 'flash-mode-line)
    (defun flash-mode-line ()
      (invert-face 'mode-line)
      (run-with-timer 0.1 nil #'invert-face 'mode-line))

    ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

 #+END_SRC 
* Theme
  #+begin_src emacs-lisp
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-one t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      ;;  (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))


    (use-package doom-modeline
      :config
      (doom-modeline-init))

    (setq doom-modeline-minor-modes t)

  #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :config
      (dashboard-setup-startup-hook))
    (setq dashboard-items '((recents  . 5)
			    (bookmarks . 5)
			    (projects . 5)))
  #+end_src
* try
  #+BEGIN_SRC emacs-lisp
    (use-package try)
  #+END_SRC

* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 1))
  #+END_SRC

* window management
  #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	 ))
  #+END_SRC
* Buffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC
  
* Swiper / Ivy / Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill)))

    (ivy-mode 1)
    (setq ivy-wrap t)

    (use-package counsel
      :after ivy
      :bind (("C-M-j" . 'counsel-switch-buffer)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history)
	     :map ivy-minibuffer-map
	     ("M-y" . ivy-next-line))
      )
    (counsel-mode 1)

    (use-package ivy-rich
      :after ivy
      )
    (ivy-rich-mode 1)
  #+END_SRC

* Text Navigation
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
  #+END_SRC
  
* Helpful
  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :commands (helpful-callable helpful-variable helpful-command helpful-key)
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+END_SRC
* Undo Tree
  #+begin_src emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+end_src
* Org mode
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
* Misc
  #+begin_src emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ; this color looks good for the zenburn theme but not for the one
      ; I'm using for the videos
      ; (setq beacon-color "#666600")
      )

      ; deletes all the whitespace when you hit backspace or delete
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

      ; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package multiple-cursors
      :ensure t)

    (setq save-interprogram-paste-before-kill t)
    (global-auto-revert-mode 1)
    (setq auto-revert-verbose nil)
  #+end_src

* iedit and narrow/widen dwim
  #+begin_src emacs-lisp
  ; mark and edit all copies of the marked region simultaniously. 
    (use-package iedit
      :ensure t)

      ; if you're windened, narrow to the region, if you're narrowed, widen
      ; bound to C-x n
    (defun narrow-or-widen-dwim (p)
      "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
      Intelligently means: region, org-src-block, org-subtree, or defun,
      whichever applies first.
      Narrowing to org-src-block actually calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer is already
      narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
	    ((region-active-p)
	     (narrow-to-region (region-beginning) (region-end)))
	    ((derived-mode-p 'org-mode)
	     ;; `org-edit-src-code' is not a real narrowing command.
	     ;; Remove this first conditional if you don't want it.
	     (cond ((ignore-errors (org-edit-src-code))
		    (delete-other-windows))
		   ((org-at-block-p)
		    (org-narrow-to-block))
		   (t (org-narrow-to-subtree))))
	    (t (narrow-to-defun))))

    ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
    ;; This line actually replaces Emacs' entire narrowing keymap, that's
    ;; how much I like this command. Only copy it if that's what you want.
    ;; (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+end_src
* projectile
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ("C-c p" . projectile-command-map)))
  #+end_src
* Paredit
  #+begin_src emacs-lisp
    (use-package paredit
      :ensure t
      :config
      (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
      ;; enable in the *scratch* buffer
      (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
      (add-hook 'lisp-mode-hook 'paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
      (add-hook 'clojure-mode-hook 'paredit-mode)
      (add-hook 'clojurescript-mode-hook 'paredit-mode)
      (add-hook 'clojurec-mode-hook 'paredit-mode)
      (add-hook 'cider-repl-mode-hook 'paredit-mode))
  #+end_src
* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :commands magit-status
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  #+end_src
* Rainbow-delimiters
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
* Treemacs
  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :config
      (progn
	(setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	      treemacs-deferred-git-apply-delay      0.5
	      treemacs-directory-name-transformer    #'identity
	      treemacs-display-in-side-window        t
	      treemacs-eldoc-display                 t
	      treemacs-file-event-delay              5000
	      treemacs-file-extension-regex          treemacs-last-period-regex-value
	      treemacs-file-follow-delay             0.2
	      treemacs-file-name-transformer         #'identity
	      treemacs-follow-after-init             t
	      treemacs-git-command-pipe              ""
	      treemacs-goto-tag-strategy             'refetch-index
	      treemacs-indentation                   2
	      treemacs-indentation-string            " "
	      treemacs-is-never-other-window         nil
	      treemacs-max-git-entries               5000
	      treemacs-missing-project-action        'ask
	      treemacs-move-forward-on-expand        nil
	      treemacs-no-png-images                 nil
	      treemacs-no-delete-other-windows       t
	      treemacs-project-follow-cleanup        nil
	      treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	      treemacs-position                      'left
	      treemacs-read-string-input             'from-child-frame
	      treemacs-recenter-distance             0.1
	      treemacs-recenter-after-file-follow    nil
	      treemacs-recenter-after-tag-follow     nil
	      treemacs-recenter-after-project-jump   'always
	      treemacs-recenter-after-project-expand 'on-distance
	      treemacs-show-cursor                   nil
	      treemacs-show-hidden-files             t
	      treemacs-silent-filewatch              nil
	      treemacs-silent-refresh                nil
	      treemacs-sorting                       'alphabetic-asc
	      treemacs-space-between-root-nodes      t
	      treemacs-tag-follow-cleanup            t
	      treemacs-tag-follow-delay              1.5
	      treemacs-user-mode-line-format         nil
	      treemacs-user-header-line-format       nil
	      treemacs-width                         35
	      treemacs-workspace-switch-cleanup      nil)

	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)

	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode 'always)
	(pcase (cons (not (null (executable-find "git")))
		     (not (null treemacs-python-executable)))
	  (`(t . t)
	   (treemacs-git-mode 'deferred))
	  (`(t . _)
	   (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
	    ("M-0"       . treemacs-select-window)
	    ("C-x t 1"   . treemacs-delete-other-windows)
	    ("C-x t t"   . treemacs)
	    ("C-x t B"   . treemacs-bookmark)
	    ("C-x t C-t" . treemacs-find-file)
	    ("C-x t M-t" . treemacs-find-tag)))


    (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t)

    (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t)
  #+end_src
* CIDER
  #+begin_src emacs-lisp
    (use-package cider)
  #+end_src
* Company
  #+begin_src emacs-lisp
    (use-package company
      :bind (("C-c /" . company-complete))
      :config
      (global-company-mode))

    (use-package company-flx
      :config
      (company-flx-mode +1))

  #+end_src
* Clj-refactor
  #+begin_src emacs-lisp
    (use-package clj-refactor
      :ensure t
      :init
      (add-hook 'clojure-mode-hook 'clj-refactor-mode)
      :config
      ;; Configure the Clojure Refactoring prefix:
      (cljr-add-keybindings-with-prefix "C-c '")
      (setq cljr-warn-on-eval nil)
      :diminish clj-refactor-mode)
  #+end_src
* CLojure
  #+begin_src emacs-lisp
    (use-package clojure-mode
      :ensure t
      :init
      (defconst clojure--prettify-symbols-alist
	'(("fn"   . ?λ)
	  ("__"   . ?⁈)))

      :config
      (add-hook 'clojure-mode-hook 'global-prettify-symbols-mode)
      :bind (("C-c d f" . cider-code)
	     ("C-c d g" . cider-grimoire)
	     ("C-c d w" . cider-grimoire-web)
	     ("C-c d c" . clojure-cheatsheet)
	     ("C-c d d" . dash-at-point)))
  #+end_src
* EShell
  
  #+begin_src emacs-lisp
    (use-package esh-autosuggest
      :hook (eshell-mode . esh-autosuggest-mode))

    (use-package fish-completion
      :config
      (global-fish-completion-mode))

    (use-package exec-path-from-shell)
  #+end_src
* Programming
** Auto save
   #+begin_src emacs-lisp
    (use-package real-auto-save
      :config
      (add-hook 'prog-mode-hook 'real-auto-save-mode)
      (setq real-auto-save-interval 1))
   #+end_src
** yaml
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
   #+end_src


    
